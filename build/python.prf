# profile to include and link Python
win32 {
    PYTHON_VERSION = 311
} else:unix {
    PYTHON_VERSION = 3.11
} else {
    PYTHON_VERSION = 311
}


# Change this variable to your python version (2.6, 2.7, 3.3, ...)
isEmpty( PYTHON_VERSION ) {
  PYTHON_VERSION=$$(PYTHON_VERSION)
}
isEmpty( PYTHON_VERSION ) {
  win32:PYTHON_VERSION=27
  unix:PYTHON_VERSION=2.7
}

message(Using Python version $${PYTHON_VERSION})

# This lib was build with python3.11.1. The PyCode_GetVarnames() was introduced in 11 version and it made it necessary
# to correct lines 2374 to 2394 in PythonQt.cpp. If you use earlier versions of python you may take the source code
# of PythonQt from mevislab.

macx {
  # for macx you need to have the Python development kit installed as framework
  INCLUDEPATH += /System/Library/Frameworks/Python.framework/Headers
  LIBS += -F/System/Library/Frameworks -framework Python
} else:win32 {
  # check if debug or release
  CONFIG(debug, debug|release) {
    DEBUG_EXT = _d
  } else {
    DEBUG_EXT = 
  }

  # For windows build:
  # 1. Install python-3.11.1-amd64 with debug /Include_debug=1/ (https://docs.python.org/3/using/windows.html).
  #    Debug Python version will be python311_d.dll, release python311.dll. Without python311_d.dll it is impossible to
  #    build debug version of PythonQt.
  # 2. Install pybind11 using pip ('pip install pybind11' in cmd). It is needed for eval.h file only. You can find
  #    this header by yourself, dont forget to add INCLUDEPATH.
  # 3. Set PYTHON_PATH (usually C:/Users/$${username}/AppData/Local/Programs/Python/Python311).
  # 4. Written above is applicable to other versions of python. Then change PYTHON_VERSION to actual in the beginning
  #    of this file.
  PYTHON_PATH = C:/Users/$$(USERNAME)/AppData/Local/Programs/Python/Python$${PYTHON_VERSION}
  win32:INCLUDEPATH += $${PYTHON_PATH}/include \
                       $${PYTHON_PATH}/include/cpython \
                       $${PYTHON_PATH}/Lib/site-packages/pybind11/include/pybind11

  win32:LIBS += $${PYTHON_PATH}/python$${PYTHON_VERSION}$${DEBUG_EXT}.dll

} else:unix {
  # For linux build (tested on ubuntu 22.04):
  # 1. Build python (3.11.1 tested) from source as it is told in README.rst of source package with the following changes:
  #    ./configure --with-pydebug --enable-shared #(--with-pydebug installs debug libraries, --enable-shared builds .so libs instead of .a libs. --enable-shared makes your interpreter slower but allows to embed it to other applications)
  #    make
  #    make test
  #    sudo make install
  # 2. Install pybind11 using pip ('pip3 install pybind11' in cmd). It is needed for eval.h file only. You can find
  #    this header by yourself, dont forget to add INCLUDEPATH.
  #    Don't confuse ubuntu's embeded interpreter (python3.10 by default for ubuntu 22.04) and the one you have just installed.
  #    Check python3 with the terminal.
  # 3. Written above is applicable to other versions of python (probably). Then change PYTHON_VERSION to actual in the beginning
  #    of this file.
  
  INCLUDEPATH += /usr/local/include/python3.11d \
                 /usr/local/include/python3.11d/cpython \
                 /usr/local/lib/python3.11/site-packages/pybind11/include/pybind11

  # on linux, python-config is used to autodetect Python.
  PYTHON_CONFIG = /usr/local/bin/python$${PYTHON_VERSION}-config
  system($${PYTHON_CONFIG} --embed --libs) {
    unix:LIBS += $$system($${PYTHON_CONFIG} --embed --libs)
  } else: unix:LIBS += $$system($${PYTHON_CONFIG} --libs)  
  unix:QMAKE_CXXFLAGS += $$system($${PYTHON_CONFIG} --includes)
  PYTHON_LFLAGS = $$system($${PYTHON_CONFIG} --ldflags)
  unix:QMAKE_LFLAGS += $${PYTHON_LFLAGS}
  # add rpath
  PYTHON_LIBDIR = $$find(PYTHON_LFLAGS,-L.*)
  RPATH = -Wl,-rpath,
  PYTHON_RPATH = $$replace(PYTHON_LIBDIR,-L,$${RPATH})
  unix:QMAKE_LFLAGS += $${PYTHON_RPATH}
}
